## Fom https://github.com/crate-ci/cargo-release/blob/master/.github/workflows/post-release.yml

name: Post-Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  BIN_NAME: vsmtp

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == ''
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate Release Notes
        run: |
          ./.github/release-notes.py --tag ${{ env.RELEASE_VERSION }} --output notes-${{ env.RELEASE_VERSION }}.md
          cat notes-${{ env.RELEASE_VERSION }}.md
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body_path: notes-${{ env.RELEASE_VERSION }}.md
  build-deb-package:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            host_os: ubuntu-20.04
          - target: x86_64-unknown-linux-gnu
            host_os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            host_os: ubuntu-20.04
          - target: aarch64-unknown-linux-gnu
            host_os: ubuntu-22.04
    continue-on-error: true
    runs-on: ${{ matrix.host_os }}
    steps:
      - uses: actions/checkout@v3
      - if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update && sudo apt-get install -y \
            gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - run: |
          git clone https://github.com/viridIT/cargo-deb.git
          cd cargo-deb
          git checkout fix/changelog-path
          cargo build
          cd ..
      - run: rustup target add ${{ matrix.target }}
      - run: |
          echo "asset name will be"
          if [ ${{ matrix.target }} == 'aarch64-unknown-linux-gnu' ]; then
            suffix="arm64"
          else
            suffix="amd64"
          fi
          echo "vsmtp_${{ needs.create-release.outputs.release_version }}+${${{ matrix.target }}//-/}_${suffix}.deb"
      - if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          cat > ~/.cargo/config <<EOF
          [target.${{ matrix.target }}]
          strip = { path = "aarch64-linux-gnu-strip" }
          EOF
          ./cargo-deb/target/debug/cargo-deb -p vsmtp -v --target=${{ matrix.target }}
        env:
          TARGET_CC: aarch64-linux-gnu-gcc
          TARGET_AR: aarch64-linux-gnu-gcc-ar
          RUSTFLAGS: "--cfg procmacro2_semver_exempt -C linker=aarch64-linux-gnu-gcc"
      - if: ${{ matrix.target != 'aarch64-unknown-linux-gnu' }}
        run: ./cargo-deb/target/debug/cargo-deb -p vsmtp -v --target=${{ matrix.target }}
        env:
          # see https://github.com/atanunq/viu/issues/68
          RUSTFLAGS: "--cfg procmacro2_semver_exempt"
      - name: Build archive
        shell: bash
        run: |
          asset_folder="target/${{ matrix.target }}/debian"
          asset_filename=`ls $asset_folder | head -n 1`
          echo "$asset_folder/$asset_filename"
          echo "ASSET=$asset_folder/$asset_filename" >> $GITHUB_ENV
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
  build-release:
    name: build-release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.target }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - name: Build release binary
        run: cargo build --target ${{ matrix.target }} --verbose --release
      - name: Build archive
        shell: bash
        run: |
          outdir="./target/${{ env.TARGET_DIR }}/release"
          staging="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.os }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}
          cp {README.md,LICENSE*} "$staging/"
          cp CHANGELOG.md "$staging/doc/"
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
  push-dockerhub:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build, tag, and push
        uses: docker/build-push-action@v3.2.0
        with:
          push: true
          tags: "viridit/vsmtp:${{ needs.create-release.outputs.release_version }}"
          platforms: linux/amd64,linux/arm64
          file: ./docker/Dockerfile
