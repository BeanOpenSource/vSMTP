// Import the object file. The 'doe' prefix lets you distinguish Doe's family objects from others.
import "objects" as obj;
import "services" as svc;

#{
  mail: [
    // NOTE: This is commented because I could not yet find a way to
    //       run automated test with file objects. Since the path must
    //       be absolute, it does not integrate well with unit tests.

    // You can use files to serve as a blacklist, or directly write it in vsl.
    // rule "blacklist" || if mail_from().domain in obj::blacklist { deny() } else { next() },
    rule "blacklist" || if mail_from().domain == "spam-domain.org" { deny() } else { next() }
  ],

  rcpt: [
    // Jane will always be added as a bcc when jenny is part of the recipients.
    action "bcc jenny" || if obj::jenny == rcpt() { bcc(obj::jane) },

    // Prevent delivery to untrusted domains using a regex.
    // you could also use the `check_relay` function in this case.
    rule "do not deliver untrusted domains" || {
      if rcpt() == obj::untrusted {
        quarantine("untrusted")
      } else {
        next()
      }
    }
  ],

  // NOTE: This is commented because I could not yet find a way to
  //       run automated test with clamsmtpd running in the background.
  //       the following preq delegation is still valid, you can use it
  //       in you own scripts.

  // postq: [
  //   delegate svc::clamsmtpd "antivirus" || {
  //     // clamav inserts the 'X-Virus-Infected' header
  //     // once a virus is detected.
  //     if has_header("X-Virus-Infected") {
  //       quarantine("virus_q")
  //     } else {
  //       next()
  //     }
  //   }
  // ],

  delivery: [
    action "setup delivery" ||
      // We loop over all recipients and deliver locally if any of them is part of the family.
      // otherwise, we simply deliver the email over SMTP.
      for rcpt in rcpt_list() {
        if rcpt in obj::family_addr { maildir(rcpt) } else { deliver(rcpt) }
      }
  ],
}
