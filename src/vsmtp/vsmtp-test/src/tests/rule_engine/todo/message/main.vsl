/*
 * vSMTP mail transfer agent
 * Copyright (C) 2022 viridIT SAS
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see https://www.gnu.org/licenses/.
 *
*/
#{
    connect: [
        rule "fail mail_from rewrite: bad address format" || {
            try {
                envelop::rw_mail_from("invalid");
                return state::deny();
            } catch (err) {
                if "invalid type conversion" in err { return state::next(); } else { return state::deny(); }
            }
        },

        rule "fail rcpt rewrite: 1st bad address format" || {
            try {
                envelop::rw_rcpt("invalid", "valid@email.com");
                return state::deny();
            } catch (err) {
                if "invalid type conversion" in err { return state::next(); } else { return state::deny(); }
            }
        },

        rule "fail rcpt rewrite: 2nd bad address format" || {
            try {
                envelop::rw_rcpt("valid@email.com", "invalid");
                return state::deny();
            } catch (err) {
                if "invalid type conversion" in err { return state::next(); } else { return state::deny(); }
            }
        },

        rule "unavailable mail timestamp" || {
            try {
                print(ctx::mail_timestamp());
                return state::deny();
            } catch (err) {
                if "the field: `mail_timestamp` is not defined" in err { return state::next(); } else { return state::deny(); }
            }
        },

        rule "unavailable message id" || {
            try {
                print(ctx::message_id()());
                return state::deny();
            } catch (err) {
                if "the field: `message_id` is not defined" in err { return state::next(); } else { return state::deny(); }
            }
        },

        rule "trailing connect" || state::accept(),
    ],

    preq: [
        rule "raw=>parsed and mail_from raw" || {
            try {
                msg::rw_mail_from("impossible@torewrite.com");
                return state::next();
            } catch (err) {
                print(err);
                return state::deny();
            }
        },

        rule "raw=>parsed and add rcpt" || {
            try {
                msg::add_rcpt("impossible@toadd.com");
                return state::next();
            } catch (err) {
                print(err);
                return state::deny();
            }
        },

        rule "raw=>parsed and remove rcpt" || {
            try {
                msg::rm_rcpt("impossible@toremove.com");
                return state::next();
            } catch (err) {
                print(err);
                return state::deny();
            }
        },

        rule "raw=>parsed and rewrite rcpt" || {
            try {
                msg::rw_rcpt("impossible@torewrite.com", "impossible@torewrite.com");
                return state::next();
            } catch (err) {
                print(err);
                return state::deny();
            }
        },

        rule "trailing preq" || state::accept(),
    ],

    postq: [
        action "printing client data" || {
            log("debug", "email received.");
            log("debug", `connexion timestamp: ${ctx::connection_timestamp()}`);
            log("debug", `ip: ${ctx::client_ip()}`);
            log("debug", `helo: ${ctx::helo()}`);
            log("debug", `mail_from: ${ctx::mail_from()}`);
            log("debug", `metadata {\n  mail timestamp: ${ctx::mail_timestamp()}\n  message id: ${ctx::message_id()()}\n}`);

            log("trace", ctx().to_string());
            log("trace", ctx().to_debug());

            print(ctx::mail_timestamp().to_string());
            print(ctx::mail_timestamp().to_debug());
        },

        action "rewrite envelop" || {
            envelop::add_rcpt("added@example.com");
            envelop::rm_rcpt("rcpt@toremove.org");
            envelop::rw_rcpt("rcpt@torewrite.net", "new@rcpt.net");
            envelop::rw_mail_from("new@mailfrom.eu");
        },

        action "rewrite message headers" || {
            // available parameters types for `msg::add_rcpt`.
            const added1 = address("added1@example.com");
            const added2 = "added2@example.com";
            msg::add_rcpt(added1);
            msg::add_rcpt(added2);
            msg::add_rcpt("added3@example.com");

            const fail = ip4("127.0.0.1");
            try { msg::add_rcpt(fail); return state::deny(); } catch (e) { print(e) }

            // available parameters types for `msg::rm_rcpt`.
            const removed1 = address("removed1@example.com");
            const removed2 = "removed2@example.com";
            msg::rm_rcpt(removed1);
            msg::rm_rcpt(removed2);
            msg::rm_rcpt("removed3@example.org");

            const fail = ip4("127.0.0.1");
            try { msg::rm_rcpt(fail); return state::deny(); } catch (e) { print(e) }

            // available parameters types for `msg::rw_rcpt`.
            const rewrite1 = address("rewrite1@example.com");
            const rewrite2 = "rewrite2@example.com";
            msg::rw_rcpt(rewrite1, "rewrite3@example.org");
            msg::rw_rcpt("rewrite3@example.org", rewrite2);
            msg::rw_rcpt("rewrite3@example.org", "rewrite4@example.org");
            msg::rw_rcpt(rewrite1, rewrite2);

            const fail = ip4("127.0.0.1");
            try { msg::rw_rcpt(fail, "rewrite3@example.com"); return state::deny(); } catch (e) { print(e) }

            msg::rm_rcpt(added1);
            msg::rm_rcpt("other.rcpt@toremove.org");
            msg::rw_rcpt("other.rcpt@torewrite.net", rewrite1);
            msg::rw_rcpt(added2, rewrite2);
        },

        rule "check rewrites" || {
            if "added@example.com" in ctx::rcpt_list()
            && !("rcpt@toremove.org" in ctx::rcpt_list())
            && "new@rcpt.net" in ctx::rcpt_list()
            && !("rcpt@torewrite.net" in ctx::rcpt_list())
            && ctx::mail_from() is "new@mailfrom.eu" {
                state::next()
            } else {
                print(ctx::mail_from());
                state::deny()
            }
        },

        rule "trailing postq" || state::accept(),
    ]
}
