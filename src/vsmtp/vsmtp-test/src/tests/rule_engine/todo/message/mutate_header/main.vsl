/*
 * vSMTP mail transfer agent
 * Copyright (C) 2022 viridIT SAS
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see https://www.gnu.org/licenses/.
 *
*/

fn mutate_headers() {

    const header_name = "X-New-Header";
    const header_value = "value of header";
    const another_header_value = "value of header";
    const from_header = "From";
    const green = address("green@foo.net");

    msg::append_header(header_name, header_value);
    msg::append_header("X-Another-Header", another_header_value);
    msg::append_header(from_header, "<john@doe.com>");
    msg::append_header("To", green);

    const status = "X-VSMTP-STATUS";
    const status_delivered = "delivered";

    const tracing = "X-VSMTP-TRACING";
    const default_sender = fqdn("example.com");

    msg::prepend_header(status, status_delivered);
    msg::prepend_header(tracing, "empty");
    msg::prepend_header("X-VSMTP-SENDER", default_sender);

    if !msg::has_header(header_name)
    || !msg::has_header("X-Another-Header")
    || !msg::has_header("From")
    || !msg::has_header("To")
    || !msg::has_header("X-VSMTP-STATUS")
    || !msg::has_header("X-VSMTP-TRACING")
    || !msg::has_header("X-VSMTP-SENDER")
    {
        return state::deny();
    }

    const new_value = "blah blah blah";

    msg::set_header(header_name, header_value);
    msg::set_header(header_name, "new value!");
    msg::set_header("X-Another-Header", "value of another");
    msg::set_header("X-Yet-Another-Header", new_value);

    print(msg::get_header(header_name));
    print(msg::get_header("X-Yet-Another-Header"));
    print(msg::get_header("X-VSMTP-STATUS"));

    if !msg::has_header("X-New-Header")
    || !msg::has_header("X-Another-Header")
    || !msg::has_header("X-Yet-Another-Header")
    {
        return state::deny();
    }

    if !(msg::get_header("X-New-Header") == "new value!")
    && !(msg::get_header("X-Another-Header") == "value of another")
    && !(msg::get_header("From") == "<john@doe.com>")
    && !(msg::get_header("To") == "green@foo.net")
    && !(msg::get_header("X-Yet-Another-Header") == "blah blah blah")
    && !(msg::get_header("X-VSMTP-STATUS") == "delivered")
    && !(msg::get_header("X-VSMTP-TRACING") == "empty")
    && !(msg::get_header("X-VSMTP-SENDER") == "example.com")
    {
        return state::deny();
    }

    msg::prepend_header("X-To-Rename", "Value should not change");

    if msg::get_header("X-To-Rename") != "Value should not change"
    {
        print(`to rename: ${msg::get_header("X-To-Rename")}`);
        return state::deny();
    }

    msg::rename_header("X-To-Rename", "X-Renamed");

    if msg::has_header("X-To-Rename")
    || msg::get_header("X-Renamed") != "Value should not change"
    {
        print(`to rename: ${msg::get_header("X-To-Rename")}`);
        print(`renamed: ${msg::get_header("X-Renamed")}`);
        return state::deny();
    }

    print(msg::get_all_headers());

    msg::prepend_header("X-Multi-Header", "1");
    msg::prepend_header("X-Multi-Header", "2");
    msg::prepend_header("X-Multi-Header", "3");
    msg::prepend_header("X-Multi-Header", "4");
    msg::prepend_header("X-Multi-Header", "5");

    if msg::has_header("X-Multi-Header") == false
    || msg::count_header("X-Multi-Header") != 5
    || msg::get_all_headers("X-Multi-Header") != [" 5", " 4", " 3", " 2", " 1"] {
        return state::deny();
    }

    while msg::rm_header("X-Multi-Header") {}
    msg::rm_header("X-Another-Header");
    msg::rm_header(status);

    print(msg::get_all_headers());

    if !msg::has_header("X-Another-Header")
    && !msg::has_header("X-Multi-Header")
    && !msg::has_header(status) {
        state::next()
    } else {
        state::deny()
    }
}

#{
    connect: [
        rule "adding headers when body is empty" || mutate_headers(),
        rule "trailing connect" || state::accept(),
    ],

    preq: [
        rule "adding headers to raw email" || mutate_headers(),
        rule "trailing preq" || state::accept(),
    ],

    postq: [
        rule "adding headers to parsed email" || mutate_headers(),
        rule "trailing postq" || state::accept(),
    ],
}
